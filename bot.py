import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from translations import translation_manager
from knowledge_utils import read_knowledge_base, find_relevant_context
from llm_utils import generate_response

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è API –∫–ª—é—á—ñ–≤ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ –≤—ñ–¥–ª–∞–¥–æ—á–Ω–∏–º –≤–∏–≤–æ–¥–æ–º
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
print(
    f"TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN}"
)  # –î–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏, –≤–∏–¥–∞–ª—ñ—Ç—å –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == "your_telegram_bot_token_here":
    raise ValueError(
        "–í–∞–ª—ñ–¥–Ω–∏–π TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ç–æ–∫–µ–Ω —É —Ñ–∞–π–ª .env"
    )

ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")
if not ANTHROPIC_API_KEY or ANTHROPIC_API_KEY == "your_anthropic_api_key_here":
    logging.warning(
        "–í–∞–ª—ñ–¥–Ω–∏–π ANTHROPIC_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å LLM –±—É–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    )

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –º–æ–≤–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_languages = {}


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_language(user_id: int) -> str:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Args:
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        –ö–æ–¥ –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    return user_languages.get(user_id, "en")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def get_main_keyboard(language: str) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏

    Args:
        language: –ö–æ–¥ –º–æ–≤–∏

    Returns:
        –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    """
    builder = InlineKeyboardBuilder()

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ FAQ —Ç–∞ Info
    builder.add(
        InlineKeyboardButton(
            text=translation_manager.get_text("button_faq", language),
            callback_data="faq",
        ),
        InlineKeyboardButton(
            text=translation_manager.get_text("button_info", language),
            callback_data="info",
        ),
    )

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º–æ–≤–∏
    builder.row(
        InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en"),
        InlineKeyboardButton(text="üá≤üáæ Bahasa Melayu", callback_data="lang_ms"),
    )

    return builder.as_markup()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
def get_back_keyboard(language: str) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–æ—é –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è

    Args:
        language: –ö–æ–¥ –º–æ–≤–∏

    Returns:
        –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    """
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text=translation_manager.get_text("button_back", language),
            callback_data="back",
        )
    )
    return builder.as_markup()


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = message.from_user.id
    language = get_user_language(user_id)

    welcome_text = translation_manager.get_text(
        "welcome_message", language, user_name=message.from_user.full_name
    )

    await message.answer(text=welcome_text, reply_markup=get_main_keyboard(language))


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /faq
@dp.message(Command("faq"))
async def command_faq_handler(message: Message) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /faq"""
    user_id = message.from_user.id
    language = get_user_language(user_id)

    faq_text = translation_manager.get_text("faq_text", language)

    await message.answer(
        text=faq_text, reply_markup=get_back_keyboard(language), parse_mode="Markdown"
    )


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /info
@dp.message(Command("info"))
async def command_info_handler(message: Message) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /info"""
    user_id = message.from_user.id
    language = get_user_language(user_id)

    info_text = translation_manager.get_text("info_text", language)

    await message.answer(
        text=info_text, reply_markup=get_back_keyboard(language), parse_mode="Markdown"
    )


# –û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤
@dp.callback_query()
async def callback_handler(callback: CallbackQuery) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    user_id = callback.from_user.id
    language = get_user_language(user_id)

    # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –∑–º—ñ–Ω–∏ –º–æ–≤–∏
    if callback.data.startswith("lang_"):
        # Get the selected language from the callback data
        selected_lang = callback.data.split('_')[1]
        
        # Check if the language has actually changed
        current_lang = get_user_language(user_id)
        if selected_lang == current_lang:
            await callback.answer(translation_manager.get_text('language_already_selected', current_lang))
            return
            
        # Update the user's language preference
        user_languages[user_id] = selected_lang
        
        # Get the new text for the message
        welcome_text = translation_manager.get_text("welcome_message", selected_lang, user_name=callback.from_user.full_name)
        
        # Edit the message with the new language
        await callback.message.edit_text(
            text=welcome_text,
            reply_markup=get_main_keyboard(selected_lang)
        )

    # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É FAQ
    elif callback.data == "faq":
        faq_text = translation_manager.get_text("faq_text", language)

        await callback.message.edit_text(
            text=faq_text,
            reply_markup=get_back_keyboard(language),
            parse_mode="Markdown",
        )

    # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É Info
    elif callback.data == "info":
        info_text = translation_manager.get_text("info_text", language)

        await callback.message.edit_text(
            text=info_text,
            reply_markup=get_back_keyboard(language),
            parse_mode="Markdown",
        )

    # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    elif callback.data == "back":
        welcome_text = translation_manager.get_text(
            "welcome_message", language, user_name=callback.from_user.full_name
        )

        await callback.message.edit_text(
            text=welcome_text, reply_markup=get_main_keyboard(language)
        )

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback-–∑–∞–ø–∏—Ç, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ –≥–æ–¥–∏–Ω–Ω–∏–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    await callback.answer()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –ø–µ—Ä—Å–æ–Ω–∏
def read_persona_instructions(file_path: str = "persona_instructions.txt") -> str:
    """–ß–∏—Ç–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ —Å—Ç–∏–ª—é —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑—ñ—Ä–∫–∏ –∑ —Ñ–∞–π–ª—É
    
    Args:
        file_path: –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏
        
    Returns:
        –¢–µ–∫—Å—Ç —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    """
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –ø–µ—Ä—Å–æ–Ω–∏ '{file_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return ""
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –ø–µ—Ä—Å–æ–Ω–∏: {e}")
        return ""


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def echo_handler(message: types.Message) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = message.from_user.id
    language = get_user_language(user_id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    query = message.text
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {query}")
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–≤, —â–æ –±–æ—Ç –æ–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    try:
        # –ß–∏—Ç–∞—î–º–æ –±–∞–∑—É –∑–Ω–∞–Ω—å
        logging.info("–ß–∏—Ç–∞—î–º–æ –±–∞–∑—É –∑–Ω–∞–Ω—å...")
        knowledge_text = read_knowledge_base("knowledge_base.txt")
        
        if not knowledge_text:
            # –Ø–∫—â–æ –±–∞–∑–∞ –∑–Ω–∞–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            logging.error("–ë–∞–∑–∞ –∑–Ω–∞–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—è")
            await message.answer(
                translation_manager.get_text("knowledge_base_error", language)
            )
            return
        
        # –®—É–∫–∞—î–º–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        logging.info("–ü–æ—à—É–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...")
        relevant_context = find_relevant_context(query, knowledge_text, max_tokens=1000)
        
        if not relevant_context:
            # –Ø–∫—â–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞
            logging.info(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Ç—É: {query}")
            await message.answer(
                translation_manager.get_text("no_relevant_info", language)
            )
            return
        
        # –ß–∏—Ç–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∏
        logging.info("–ß–∏—Ç–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∏...")
        persona_instructions = read_persona_instructions()
        if not persona_instructions:
            logging.warning("–§–∞–π–ª —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –ø–µ—Ä—Å–æ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.")
            persona_instructions = "–¢–∏ - –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑—ñ—Ä–∫–∏. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¥—Ä—É–∂–Ω—å–æ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ."
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é LLM
        logging.info("–ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é LLM...")
        llm_response = await generate_response(
            query=query,
            context=relevant_context,
            persona_instructions=persona_instructions,
            max_tokens=1000
        )
        
        if "–ù–∞ –∂–∞–ª—å" in llm_response and ("–ø–æ–º–∏–ª–∫–∞" in llm_response or "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω" in llm_response):
            logging.warning(f"LLM –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {llm_response}")
            # –Ø–∫—â–æ LLM –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—î–º–æ –π–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            await message.answer(llm_response)
        else:
            # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –±–µ–∑ –º–µ–Ω—é
            logging.info("–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
            await message.answer(
                llm_response,
                parse_mode="Markdown",
            )
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: {e}")
        await message.answer(
            translation_manager.get_text("knowledge_base_error", language)
        )


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫—ñ–≤ —É –≤–∏–ø–∞–¥–∫—É —ó—Ö –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª—ñ–Ω–≥—É
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
