# bot.py (–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)

import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from translations import translation_manager
# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ find_relevant_context, read_knowledge_base –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç—É—Ç
from knowledge_utils import find_relevant_context 
from llm_utils import generate_response

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logger –∑–∞–º—ñ—Å—Ç—å root

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è API –∫–ª—é—á—ñ–≤ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ –≤—ñ–¥–ª–∞–¥–æ—á–Ω–∏–º –≤–∏–≤–æ–¥–æ–º
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
print(
    f"TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN}"
)  # –î–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏, –≤–∏–¥–∞–ª—ñ—Ç—å –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == "your_telegram_bot_token_here":
    raise ValueError(
        "–í–∞–ª—ñ–¥–Ω–∏–π TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ç–æ–∫–µ–Ω —É —Ñ–∞–π–ª .env"
    )

ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")
if not ANTHROPIC_API_KEY or ANTHROPIC_API_KEY == "your_anthropic_api_key_here":
    logging.warning(
        "–í–∞–ª—ñ–¥–Ω–∏–π ANTHROPIC_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å LLM –±—É–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    )

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –º–æ–≤–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø—Ä–æ—Å—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è MVP)
user_languages = {} 

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_language(user_id: int) -> str:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return user_languages.get(user_id, "en") # 'en' —è–∫ –º–æ–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def get_main_keyboard(language: str) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text=translation_manager.get_text("button_faq", language),
            callback_data="faq",
        ),
        InlineKeyboardButton(
            text=translation_manager.get_text("button_info", language),
            callback_data="info",
        ),
    )
    builder.row(
        InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en"),
        InlineKeyboardButton(text="üá≤üáæ Bahasa Melayu", callback_data="lang_ms"),
    )
    return builder.as_markup()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
def get_back_keyboard(language: str) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–æ—é –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è"""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text=translation_manager.get_text("button_back", language),
            callback_data="back",
        )
    )
    return builder.as_markup()


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = message.from_user.id
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'en' –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    language = get_user_language(user_id) 
    welcome_text = translation_manager.get_text(
        "welcome_message", language, user_name=message.from_user.full_name
    )
    await message.answer(text=welcome_text, reply_markup=get_main_keyboard(language))


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /faq
@dp.message(Command("faq"))
async def command_faq_handler(message: Message) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /faq"""
    user_id = message.from_user.id
    language = get_user_language(user_id)
    faq_text = translation_manager.get_text("faq_text", language)
    await message.answer(
        text=faq_text, reply_markup=get_back_keyboard(language), parse_mode="Markdown"
    )


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /info
@dp.message(Command("info"))
async def command_info_handler(message: Message) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /info"""
    user_id = message.from_user.id
    language = get_user_language(user_id)
    info_text = translation_manager.get_text("info_text", language)
    await message.answer(
        text=info_text, reply_markup=get_back_keyboard(language), parse_mode="Markdown"
    )


# –û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤
@dp.callback_query()
async def callback_handler(callback: CallbackQuery) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    user_id = callback.from_user.id
    current_lang = get_user_language(user_id) # –ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞ –¥–ª—è —Ç–µ–∫—Å—Ç—É –ø–æ–º–∏–ª–æ–∫/–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

    # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –∑–º—ñ–Ω–∏ –º–æ–≤–∏
    if callback.data.startswith("lang_"):
        selected_lang = callback.data.split('_')[1]
        
        if selected_lang == current_lang:
            # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –∑–∞–ø–∏—Ç, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–∞—á–∏–≤, —â–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ
            await callback.answer(translation_manager.get_text('language_already_selected', current_lang))
            return
            
        user_languages[user_id] = selected_lang # –û–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É
        language = selected_lang # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É –º–æ–≤—É –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        
        welcome_text = translation_manager.get_text("welcome_message", language, user_name=callback.from_user.full_name)
        
        try:
            # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
            await callback.message.edit_text(
                text=welcome_text,
                reply_markup=get_main_keyboard(language)
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏: {e}")
            # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
            await callback.answer(translation_manager.get_text('error_occurred', language))
        return # –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —ñ–Ω—à–∏—Ö –∫–æ–ª–±–µ–∫—ñ–≤
    language = get_user_language(user_id)

    # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É FAQ
    if callback.data == "faq":
        faq_text = translation_manager.get_text("faq_text", language)
        try:
            await callback.message.edit_text(
                text=faq_text,
                reply_markup=get_back_keyboard(language),
                parse_mode="Markdown",
            )
        except Exception as e:
             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è FAQ: {e}")
             await callback.answer(translation_manager.get_text('error_occurred', language))

    # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É Info
    elif callback.data == "info":
        info_text = translation_manager.get_text("info_text", language)
        try:
            await callback.message.edit_text(
                text=info_text,
                reply_markup=get_back_keyboard(language),
                parse_mode="Markdown",
            )
        except Exception as e:
             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Info: {e}")
             await callback.answer(translation_manager.get_text('error_occurred', language))


    # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    elif callback.data == "back":
        welcome_text = translation_manager.get_text(
            "welcome_message", language, user_name=callback.from_user.full_name
        )
        try:
            await callback.message.edit_text(
                text=welcome_text, reply_markup=get_main_keyboard(language)
            )
        except Exception as e:
             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è: {e}")
             await callback.answer(translation_manager.get_text('error_occurred', language))


    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ –≥–æ–¥–∏–Ω–Ω–∏–∫
    try:
        await callback.answer()
    except Exception as e:
        # –ú–æ–∂–µ –≤–∏–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫–∞, —è–∫—â–æ –Ω–∞ –∫–æ–ª–±–µ–∫ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ (–Ω–∞–ø—Ä., –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è)
        logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ callback (–º–æ–∂–ª–∏–≤–æ, –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏): {e}")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –ø–µ—Ä—Å–æ–Ω–∏
def read_persona_instructions(file_path: str = "persona_instructions.txt") -> str:
    """–ß–∏—Ç–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ —Å—Ç–∏–ª—é —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑—ñ—Ä–∫–∏ –∑ —Ñ–∞–π–ª—É"""
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –ø–µ—Ä—Å–æ–Ω–∏ '{file_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        return "You are a virtual assistant of a star. Respond friendly and informative." 
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –ø–µ—Ä—Å–æ–Ω–∏: {e}")
        return "You are a virtual assistant of a star. Respond friendly and informative." # –ë–∞–∑–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø)
@dp.message()
async def echo_handler(message: types.Message) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = message.from_user.id
    language = get_user_language(user_id)
    
    query = message.text
    if not query: # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        return 
        
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {query}")
    
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    try:
        # --- –í–ò–î–ê–õ–ï–ù–û: –ß–∏—Ç–∞–Ω–Ω—è –±–∞–∑–∏ –∑–Ω–∞–Ω—å —Ç—É—Ç ---
        # knowledge_text = read_knowledge_base("knowledge_base.txt") 
        # if not knowledge_text: ... (—Ü—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç—É—Ç)
        
        logger.info("–ü–æ—à—É–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...")
        # --- –û–ù–û–í–õ–ï–ù–û –í–ò–ö–õ–ò–ö find_relevant_context ---
        # –ü–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ query. max_tokens –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        relevant_context = find_relevant_context(query, max_tokens=1000) 
        # --- –ö–Ü–ù–ï–¶–¨ –û–ù–û–í–õ–ï–ù–ù–Ø ---
        
        if not relevant_context:
            # –Ø–∫—â–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—î—é –ø–æ—à—É–∫—É
            logger.info(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Ç—É: {query}")
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –∫–ª—é—á –ø–µ—Ä–µ–∫–ª–∞–¥—É
            await message.answer(
                translation_manager.get_text("context_not_found", language) 
            )
            return
        
        logger.info("–ß–∏—Ç–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∏...")
        persona_instructions = read_persona_instructions() 
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ —Ç—É—Ç –≤–∂–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞, –±–æ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π —Ç–µ–∫—Å—Ç
        
        logger.info("–ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é LLM...")
        llm_response = await generate_response(
            query=query,
            context=relevant_context,
            persona_instructions=persona_instructions,
            max_tokens=1000 # –õ—ñ–º—ñ—Ç —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ LLM
        )
        
        # --- –ü–û–ö–†–ê–©–ï–ù–ê –û–ë–†–û–ë–ö–ê –í–Ü–î–ü–û–í–Ü–î–Ü LLM ---
        if llm_response is None:
            # –Ø–∫—â–æ generate_response –ø–æ–≤–µ—Ä–Ω—É–ª–∞ None (—á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É API —Ç–æ—â–æ)
            logger.error(f"LLM –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∑–∞–ø–∏—Ç—É: {query}")
            await message.answer(translation_manager.get_text("llm_error", language))
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥ Anthropic (–º–æ–∂–µ –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏ —É—Ç–æ—á–Ω–µ–Ω–Ω—è)
        elif "sorry" in llm_response.lower() and ("cannot fulfill" in llm_response.lower() or "unable to process" in llm_response.lower()):
             logger.warning(f"LLM –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–±—Ä–æ–±–∫–∏: {llm_response}")
             await message.answer(translation_manager.get_text("llm_error", language))
        else:
            # –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LLM
            logger.info("–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
            try:
                await message.answer(
                    llm_response,
                    # parse_mode="Markdown", # –û–±–µ—Ä–µ–∂–Ω–æ –∑ Markdown, LLM –º–æ–∂–µ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∫–æ–¥
                    parse_mode=None # –ë–µ–∑–ø–µ—á–Ω—ñ—à–µ –±–µ–∑ parse_mode –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ HTML –∑ –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è–º
                )
            except Exception as e:
                 logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ LLM –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")
                 # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –±–µ–∑ parse_mode, —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –±—É–ª–∞ —á–µ—Ä–µ–∑ –Ω—å–æ–≥–æ
                 try:
                     await message.answer(llm_response, parse_mode=None)
                 except Exception as e_fallback:
                      logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ LLM: {e_fallback}")
                      await message.answer(translation_manager.get_text("error_occurred", language))

        # --- –ö–Ü–ù–ï–¶–¨ –ü–û–ö–†–ê–©–ï–ù–û–á –û–ë–†–û–ë–ö–ò ---

    except Exception as e:
        # –ó–∞–≥–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: {e}", exc_info=True) 
        await message.answer(
            translation_manager.get_text("error_occurred", language) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∫–ª—é—á –ø–æ–º–∏–ª–∫–∏
        )


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –±–∞–∑–∏ –∑–Ω–∞–Ω—å –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ knowledge_utils
    # –¢–æ–º—É –≤–∞–∂–ª–∏–≤–æ, —â–æ–± —Ü–µ–π —ñ–º–ø–æ—Ä—Ç –±—É–≤ –¥–æ –∑–∞–ø—É—Å–∫—É main()
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.run(main())