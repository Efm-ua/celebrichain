# bot.py (–í–µ—Ä—Å—ñ—è –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º NameError)

import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio 
from typing import Optional # –Ü–º–ø–æ—Ä—Ç Optional, —è–∫–∏–π –±—É–≤ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ä–∞–Ω—ñ—à–µ

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ –º–æ–¥—É–ª—ñ
from translations import translation_manager
from database import init_db, add_log_entry, update_feedback 
from knowledge_utils import find_relevant_context 
from llm_utils import generate_response

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' 
    ) 
logger = logging.getLogger(__name__) 

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è API –∫–ª—é—á—ñ–≤ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == "your_telegram_bot_token_here":
    logger.critical("!!! –í–∞–ª—ñ–¥–Ω–∏–π TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ë–æ—Ç –Ω–µ –º–æ–∂–µ —Å—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏. !!!")
    raise ValueError(
        "–í–∞–ª—ñ–¥–Ω–∏–π TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ç–æ–∫–µ–Ω —É —Ñ–∞–π–ª .env"
    )

ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")
if not ANTHROPIC_API_KEY or ANTHROPIC_API_KEY == "your_anthropic_api_key_here":
    logging.warning(
        "–í–∞–ª—ñ–¥–Ω–∏–π ANTHROPIC_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å LLM –±—É–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    )

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=None) 
dp = Dispatcher()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –º–æ–≤–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø—Ä–æ—Å—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è MVP)
user_languages = {} 

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–≤–∏ ---
def get_user_language(user_id: int) -> str:
    return user_languages.get(user_id, "en") 

def get_main_keyboard(language: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text=translation_manager.get_text("button_faq", language),
            callback_data="faq",
        ),
        InlineKeyboardButton(
            text=translation_manager.get_text("button_info", language),
            callback_data="info",
        ),
    )
    builder.row(
        InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en"),
        InlineKeyboardButton(text="üá≤üáæ Bahasa Melayu", callback_data="lang_ms"),
    )
    return builder.as_markup()

def get_back_keyboard(language: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text=translation_manager.get_text("button_back", language),
            callback_data="back",
        )
    )
    return builder.as_markup()

def get_feedback_keyboard(log_id: int) -> Optional[InlineKeyboardMarkup]: 
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ üëç/üëé –¥–ª—è —Ñ—ñ–¥–±–µ–∫—É."""
    if not isinstance(log_id, int) or log_id <= 0:
         logger.warning(f"–°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Ñ—ñ–¥–±–µ–∫—É –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º log_id: {log_id}")
         return None 
         
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üëç", callback_data=f"feedback:{log_id}:like"),
        InlineKeyboardButton(text="üëé", callback_data=f"feedback:{log_id}:dislike")
    )
    return builder.as_markup()

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ /start, /faq, /info ---
@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    user_id = message.from_user.id
    language = get_user_language(user_id) 
    welcome_text = translation_manager.get_text(
        "welcome_message", language, user_name=message.from_user.full_name
    )
    await message.answer(text=welcome_text, reply_markup=get_main_keyboard(language))

@dp.message(Command("faq"))
async def command_faq_handler(message: Message) -> None:
    user_id = message.from_user.id
    language = get_user_language(user_id)
    faq_text = translation_manager.get_text("faq_text", language)
    await message.answer(
        text=faq_text, reply_markup=get_back_keyboard(language), parse_mode="HTML" 
    )

@dp.message(Command("info"))
async def command_info_handler(message: Message) -> None:
    user_id = message.from_user.id
    language = get_user_language(user_id)
    info_text = translation_manager.get_text("info_text", language)
    await message.answer(
        text=info_text, reply_markup=get_back_keyboard(language), parse_mode="HTML" 
    )

# --- –û–Ω–æ–≤–ª–µ–Ω–∏–π –û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ ---
@dp.callback_query()
async def callback_handler(callback: CallbackQuery) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    user_id = callback.from_user.id
    language = get_user_language(user_id) 

    processed = False 

    try:
        # –û–±—Ä–æ–±–∫–∞ —Ñ—ñ–¥–±–µ–∫—É
        if callback.data and callback.data.startswith("feedback:"):
            processed = True 
            parts = callback.data.split(':')
            if len(parts) == 3:
                try:
                    log_id = int(parts[1])
                    action = parts[2] 

                    if action in ['like', 'dislike']:
                        success = await update_feedback(log_id, action)
                        
                        if success:
                            feedback_text = translation_manager.get_text('feedback_thanks', language)
                            await callback.answer(feedback_text, show_alert=False) 
                            try:
                                await callback.message.edit_reply_markup(reply_markup=None)
                            except Exception as edit_error:
                                logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏–±—Ä–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Ñ—ñ–¥–±–µ–∫—É –¥–ª—è log_id {log_id}: {edit_error}")
                        else:
                            await callback.answer(translation_manager.get_text('error_occurred', language), show_alert=True)
                    else:
                         logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è —É —Ñ—ñ–¥–±–µ–∫ –∫–æ–ª–±–µ–∫—É: {action} –¥–ª—è log_id {log_id}")
                         await callback.answer(translation_manager.get_text('error_occurred', language), show_alert=True)
                            
                except (ValueError, IndexError) as parse_error:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É callback_data —Ñ—ñ–¥–±–µ–∫—É: {callback.data}, Error: {parse_error}")
                    await callback.answer(translation_manager.get_text('error_occurred', language), show_alert=True)
            else:
                logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data —Ñ—ñ–¥–±–µ–∫—É: {callback.data}")
                await callback.answer(translation_manager.get_text('error_occurred', language), show_alert=True)
        
        # –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –º–æ–≤–∏
        elif callback.data and callback.data.startswith("lang_"):
            processed = True
            selected_lang = callback.data.split('_')[1]
            current_lang = get_user_language(user_id)
            if selected_lang != current_lang:
                if selected_lang in translation_manager.get_available_languages():
                    user_languages[user_id] = selected_lang
                    language = selected_lang 
                    welcome_text = translation_manager.get_text("welcome_message", language, user_name=callback.from_user.full_name)
                    await callback.message.edit_text(text=welcome_text, reply_markup=get_main_keyboard(language))
                else:
                    logger.warning(f"–°–ø—Ä–æ–±–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—É –º–æ–≤—É: {selected_lang}")
                    await callback.answer("Unsupported language selected.", show_alert=True)
            else:
                 await callback.answer(translation_manager.get_text('language_already_selected', language))
        
        # –û–±—Ä–æ–±–∫–∞ FAQ
        elif callback.data == "faq":
            processed = True
            faq_text = translation_manager.get_text("faq_text", language)
            await callback.message.edit_text(text=faq_text, reply_markup=get_back_keyboard(language), parse_mode="HTML") 

        # –û–±—Ä–æ–±–∫–∞ Info
        elif callback.data == "info":
            processed = True
            info_text = translation_manager.get_text("info_text", language)
            await callback.message.edit_text(text=info_text, reply_markup=get_back_keyboard(language), parse_mode="HTML") 

        # –û–±—Ä–æ–±–∫–∞ Back
        elif callback.data == "back":
            processed = True
            welcome_text = translation_manager.get_text("welcome_message", language, user_name=callback.from_user.full_name)
            await callback.message.edit_text(text=welcome_text, reply_markup=get_main_keyboard(language))

        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –∫–æ–ª–±–µ–∫, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –±—É–≤ –Ω–∞–º–∏ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —ñ —Ü–µ –Ω–µ —Ñ—ñ–¥–±–µ–∫
        if processed and not callback.data.startswith("feedback:"):
            try:
                await callback.answer()
            except Exception:
                 logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∫–æ–ª–±–µ–∫ {callback.data} (–º–æ–∂–ª–∏–≤–æ, –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ)")

    except Exception as e:
         logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ callback_handler –¥–ª—è data='{callback.data}': {e}", exc_info=True)
         try:
             await callback.answer(translation_manager.get_text('error_occurred', language), show_alert=True)
         except Exception:
             pass

# --- –î–û–î–ê–ù–û –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –§–£–ù–ö–¶–Ü–á ---
def read_persona_instructions(file_path: str = "persona_instructions.txt") -> str:
    """–ß–∏—Ç–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ —Å—Ç–∏–ª—é —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑—ñ—Ä–∫–∏ –∑ —Ñ–∞–π–ª—É"""
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –ø–µ—Ä—Å–æ–Ω–∏ '{file_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        return "You are a virtual assistant of a star. Respond friendly and informative." 
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –ø–µ—Ä—Å–æ–Ω–∏: {e}")
        return "You are a virtual assistant of a star. Respond friendly and informative." # –ë–∞–∑–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
# --- –ö–Ü–ù–ï–¶–¨ –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –§–£–ù–ö–¶–Ü–á ---


# --- –û–Ω–æ–≤–ª–µ–Ω–∏–π –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@dp.message()
async def echo_handler(message: types.Message) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = message.from_user.id
    language = get_user_language(user_id)
    
    query = message.text
    if not query: 
        return 
        
    user_info_str = f"user_id={user_id}"
    if message.from_user.username:
         user_info_str += f", username=@{message.from_user.username}"
    if message.from_user.first_name:
         user_info_str += f", name='{message.from_user.first_name}'"
         
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ({user_info_str}): '{query}'")
    
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    relevant_context: Optional[str] = None
    llm_response: Optional[str] = None
    log_id: Optional[int] = None
    final_bot_response: str = "" 

    try:
        logger.info("–ü–æ—à—É–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...")
        relevant_context = find_relevant_context(query, max_tokens=1000) 
        
        if not relevant_context:
            logger.info(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Ç—É: {query}")
            final_bot_response = translation_manager.get_text("context_not_found", language) 
            await message.answer(final_bot_response) 
            log_id = -2 
        else:
            logger.info("–ß–∏—Ç–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∏...")
            # –¢–µ–ø–µ—Ä —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –≤–∏—â–µ
            persona_instructions = read_persona_instructions() 
            
            logger.info("–ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é LLM...")
            llm_response = await generate_response(
                query=query,
                context=relevant_context,
                persona_instructions=persona_instructions,
                max_tokens=1000 
            )
            
            if llm_response is None:
                logger.error(f"LLM –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∑–∞–ø–∏—Ç—É: {query}")
                final_bot_response = translation_manager.get_text("llm_error", language)
                await message.answer(final_bot_response)
                log_id = -3 
            elif isinstance(llm_response, str) and "sorry" in llm_response.lower() and ("cannot fulfill" in llm_response.lower() or "unable to process" in llm_response.lower() or "don't have enough information" in llm_response.lower()):
                 logger.warning(f"LLM –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —Å—Ö–æ–∂—É –Ω–∞ –ø–æ–º–∏–ª–∫—É/–≤—ñ–¥–º–æ–≤—É: {llm_response}")
                 final_bot_response = llm_response 
                 await message.answer(final_bot_response, parse_mode=None)
                 log_id = -4 
            else:
                final_bot_response = llm_response 
                logger.info("–ó–∞–ø–∏—Å –ª–æ–≥—É –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...")
                log_id = await add_log_entry(
                     user_id=user_id,
                     user_first_name=message.from_user.first_name,
                     user_username=message.from_user.username,
                     user_query=query,
                     bot_response=final_bot_response, 
                     language=language,
                     retrieved_context=relevant_context 
                )
                
                feedback_markup = get_feedback_keyboard(log_id) if log_id and log_id > 0 else None

                logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (log_id: {log_id})")
                await message.answer(
                    final_bot_response,
                    reply_markup=feedback_markup,
                    parse_mode=None 
                )
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –≤ –ª–æ–≥, —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é LLM, —â–æ –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–æ, –∞–±–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        if log_id is None or log_id <= 0: # –¢–µ–ø–µ—Ä –≤–∫–ª—é—á–∞—î–º–æ -2, -3, -4
             logger.info(f"–ó–∞–ø–∏—Å –ª–æ–≥—É –¥–ª—è –≤–∏–ø–∞–¥–∫—É –±–µ–∑ —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ LLM –∞–±–æ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (log_id: {log_id})...")
             # –í–∏–∫–ª–∏–∫–∞—î–º–æ add_log_entry —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ log_id –Ω–µ –±—É–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π (—Ç–æ–±—Ç–æ –Ω–µ –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ LLM, –©–û –±—É–ª–∞ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞)
             # –ê–±–æ —è–∫—â–æ log_id <= 0 (–ø–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É, –ø–æ–º–∏–ª–∫–∞ LLM, –≤—ñ–¥–º–æ–≤–∞ LLM)
             await add_log_entry(
                 user_id=user_id,
                 user_first_name=message.from_user.first_name,
                 user_username=message.from_user.username,
                 user_query=query,
                 bot_response=final_bot_response, 
                 language=language,
                 retrieved_context=relevant_context 
             )
             
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: {e}", exc_info=True) 
        error_message_text = translation_manager.get_text("error_occurred", language)
        try:
            await message.answer(error_message_text)
        except Exception as send_err:
             logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {send_err}")
             
        try:
             # –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ–º–∏–ª–∫—É –≤ –ª–æ–≥, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –Ω–µ –≤–¥–∞–ª–∞—Å—å
             await add_log_entry(
                 user_id=user_id,
                 user_first_name=message.from_user.first_name,
                 user_username=message.from_user.username,
                 user_query=query,
                 bot_response=f"ERROR: {type(e).__name__} - {e}", 
                 language=language,
                 retrieved_context=relevant_context 
             )
        except Exception as db_err:
             logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É –≤ –ë–î –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {db_err}")

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ ---
async def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ë–î —Ç—É—Ç
    from database import init_db
    await init_db() 
    
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª—ñ–Ω–≥—É...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –±–∞–∑–∏ –∑–Ω–∞–Ω—å –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ knowledge_utils –≤–∏—â–µ
    asyncio.run(main())